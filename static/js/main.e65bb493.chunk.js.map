{"version":3,"sources":["utils/redux/actyionTypes.js","utils/redux/reducers/posts/index.js","utils/redux/reducers/index.js","utils/redux/actions/posts/index.js","services/api/index.js","utils/fetch/posts.js","utils/redux/saga/posts.js","utils/redux/store/sagas.js","utils/redux/store/index.js","components/Navbar.js","components/ErrorToast.js","components/FormAddPost.js","components/DeleteModal.js","components/EditPost.js","components/ActionInfo.js","components/Posts.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["ADD_NEW_POST","ADD_NEW_POST_SUCCESS","ADD_NEW_POST_FAIL","GET_POST_DETAILS","GET_POST_DETAILS_SUCCESS","GET_POST_DETAILS_FAIL","DELETE_POST_BY_ID","DELETE_POST_BY_ID_SUCCESS","DELETE_POST_BY_ID_FAIL","UPDATE_POST_BY_ID","UPDATE_POST_BY_ID_SUCCESS","UPDATE_POST_BY_ID_FAIL","initialState","posts","newPost","loadingAddNewPost","loadingRetrievePost","loadingDeletePost","loadingUpdatePost","error","message","PostReducer","state","action","type","payload","deletedPostIndex","findIndex","post","id","updatedPostList","splice","updatedPostIndex","rootReducer","combineReducers","updatePostById","postId","requestBody","REACT_APP_API_URL","process","axiosApi","axios","create","baseURL","url","config","a","get","then","response","data","delete","patch","interceptors","request","use","Promise","reject","POST_ENDPOINT","getPostDetails","params","addNewPost","deletePost","del","updatePost","onAddNewPost","onGetPostDetails","onDeletePostById","onUpdatePostById","PostSaga","call","put","postIdList","all","map","concat","status","takeLatest","takeEvery","rootSaga","fork","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","PostNavbar","Navbar","bg","className","Container","Brand","ErrorToast","show","errorMessage","onClose","Toast","Header","FormAddPost","useState","title","body","setRequestBody","setError","showErrorToast","setShowErrorToast","dispatch","useDispatch","handleChange","event","value","target","name","prevalue","Form","Group","controlId","Label","Control","placeholder","onChange","Text","Button","size","variant","onClick","preventDefault","userId","DeleteModal","handleCloseDeleteModal","showModal","idToDelete","Modal","onHide","Dialog","closeButton","Title","Body","ButtonGroup","sise","EditPost","handleCloseEditPost","postIdToEdit","editPost","ActionInfo","detail","Posts","LOADING","setShow","setIdToDelete","idToEdit","setIdToEdit","setEditPost","POST_ID_LIST","useEffect","index","push","fetchPosts","useSelector","deletePostById","item","Row","Col","lg","md","sm","Card","Home","App","exact","path","element","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e65bb493.chunk.js","sourcesContent":["export const ADD_NEW_POST = 'ADD_NEW_POST';\nexport const ADD_NEW_POST_SUCCESS = 'ADD_NEW_POST_SUCCESS';\nexport const ADD_NEW_POST_FAIL = 'ADD_NEW_POST_FAIL';\n\nexport const GET_POST_DETAILS = 'GET_POST_DETAILS';\nexport const GET_POST_DETAILS_SUCCESS = 'GET_POST_DETAILS_SUCCESS';\nexport const GET_POST_DETAILS_FAIL = 'GET_POST_DETAILS_FAIL';\n\nexport const DELETE_POST_BY_ID = 'DELETE_POST_BY_ID';\nexport const DELETE_POST_BY_ID_SUCCESS = 'DELETE_POST_BY_ID_SUCCESS';\nexport const DELETE_POST_BY_ID_FAIL = 'DELETE_POST_BY_ID_FAIL';\n\nexport const UPDATE_POST_BY_ID = 'UPDATE_POST_BY_ID';\nexport const UPDATE_POST_BY_ID_SUCCESS = 'UPDATE_POST_BY_ID_SUCCESS';\nexport const UPDATE_POST_BY_ID_FAIL = 'UPDATE_POST_BY_ID_FAIL';\n","import {\n  ADD_NEW_POST,\n  ADD_NEW_POST_SUCCESS,\n  ADD_NEW_POST_FAIL,\n  GET_POST_DETAILS,\n  GET_POST_DETAILS_SUCCESS,\n  GET_POST_DETAILS_FAIL,\n  DELETE_POST_BY_ID,\n  DELETE_POST_BY_ID_SUCCESS,\n  DELETE_POST_BY_ID_FAIL,\n  UPDATE_POST_BY_ID,\n  UPDATE_POST_BY_ID_SUCCESS,\n  UPDATE_POST_BY_ID_FAIL,\n} from '../../actyionTypes';\n\nconst initialState = {\n  posts: [],\n  newPost: {},\n  loadingAddNewPost: false,\n  loadingRetrievePost: false,\n  loadingDeletePost: false,\n  loadingUpdatePost: false,\n  error: {\n    message: '',\n  },\n};\n\nconst PostReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POST_DETAILS:\n      state = { ...state, loadingRetrievePost: true };\n      break;\n    case GET_POST_DETAILS_SUCCESS:\n      state = { ...state, posts: action.payload, loadingRetrievePost: false };\n      break;\n    case GET_POST_DETAILS_FAIL:\n      state = {\n        ...state,\n        error: {\n          message: 'Error',\n        },\n        loadingRetrievePost: false,\n      };\n      break;\n    case ADD_NEW_POST:\n      state = { ...state, loadingAddNewPost: true };\n      break;\n    case ADD_NEW_POST_SUCCESS:\n      state = { ...state, posts: [action.payload, ...state.posts], loadingAddNewPost: false };\n      break;\n    case ADD_NEW_POST_FAIL:\n      state = {\n        ...state,\n        error: {\n          message: 'Error',\n        },\n        loadingAddNewPost: false,\n      };\n      break;\n    case DELETE_POST_BY_ID:\n      state = { ...state, loadingDeletePost: true };\n      break;\n    case DELETE_POST_BY_ID_SUCCESS: {\n      const deletedPostIndex = state.posts.findIndex(post => post.id === action.payload);\n      let updatedPostList = [...state.posts];\n      updatedPostList.splice(deletedPostIndex, 1);\n\n      state = { ...state, posts: updatedPostList, loadingDeletePost: false };\n      break;\n    }\n    case DELETE_POST_BY_ID_FAIL:\n      state = {\n        ...state,\n        error: {\n          message: 'Error',\n        },\n        loadingDeletePost: false,\n      };\n      break;\n    case UPDATE_POST_BY_ID:\n      state = { ...state, loadingUpdatePost: true };\n      break;\n    case UPDATE_POST_BY_ID_SUCCESS: {\n      const updatedPostIndex = state.posts.findIndex(post => post.id === action.payload.id);\n      let updatedPostList = [...state.posts];\n      updatedPostList.splice(updatedPostIndex, 1, action.payload);\n\n      state = { ...state, posts: updatedPostList, loadingUpdatePost: false };\n      break;\n    }\n    case UPDATE_POST_BY_ID_FAIL:\n      state = {\n        ...state,\n        error: {\n          message: 'Error',\n        },\n        loadingUpdatePost: false,\n      };\n      break;\n    default:\n      state = { ...state };\n      break;\n  }\n  return state;\n};\n\nexport default PostReducer;\n","import { combineReducers } from 'redux';\n\nimport PostReducer from './posts';\n\nconst rootReducer = combineReducers({\n  PostReducer,\n});\n\nexport default rootReducer;\n","import {\n  ADD_NEW_POST,\n  ADD_NEW_POST_SUCCESS,\n  ADD_NEW_POST_FAIL,\n  GET_POST_DETAILS,\n  GET_POST_DETAILS_SUCCESS,\n  GET_POST_DETAILS_FAIL,\n  DELETE_POST_BY_ID,\n  DELETE_POST_BY_ID_SUCCESS,\n  DELETE_POST_BY_ID_FAIL,\n  UPDATE_POST_BY_ID,\n  UPDATE_POST_BY_ID_SUCCESS,\n  UPDATE_POST_BY_ID_FAIL\n} from '../../actyionTypes'\n\nexport const addNewPost = (requestBody) => {\n  return {\n    type: ADD_NEW_POST,\n    payload: requestBody\n  };\n};\n\nexport const addNewPostSuccess = (payload) => {\n  return {\n    type: ADD_NEW_POST_SUCCESS,\n    payload: payload,\n  };\n};\n\nexport const addNewPostFail = (error) => {\n  return {\n    type: ADD_NEW_POST_FAIL,\n    payload: error,\n  };\n};\n\nexport const getPostDetails = (postIdList) => {\n  return {\n    type: GET_POST_DETAILS,\n    payload: postIdList,\n  };\n};\n\nexport const getPostDetailsSuccess = (post) => {\n  return {\n    type: GET_POST_DETAILS_SUCCESS,\n    payload: post,\n  };\n};\n\nexport const getPostDetailsFail = (error) => {\n  return {\n    type: GET_POST_DETAILS_FAIL,\n    payload: error,\n  };\n};\n\nexport const deletePostById = (id) => {\n  return {\n    type: DELETE_POST_BY_ID,\n    payload: id,\n  };\n};\n\nexport const deletePostByIdSuccess = (post) => {\n  return {\n    type: DELETE_POST_BY_ID_SUCCESS,\n    payload: post,\n  };\n};\n\nexport const deletePostByIdFail = (error) => {\n  return {\n    type: DELETE_POST_BY_ID_FAIL,\n    payload: error,\n  };\n};\n\nexport const updatePostById = (postId, requestBody) => {\n  return {\n    type: UPDATE_POST_BY_ID,\n    payload: {\n      id: postId,\n      requestBody\n    },\n  };\n};\n\nexport const updatePostByIdSuccess = (post) => {\n  return {\n    type: UPDATE_POST_BY_ID_SUCCESS,\n    payload: post,\n  };\n};\n\nexport const updatePostByIdFail = (error) => {\n  return {\n    type: UPDATE_POST_BY_ID_FAIL,\n    payload: error,\n  };\n};\n","import axios from 'axios';\n\nconst REACT_APP_API_URL = process.env.REACT_APP_API_URL;\n\nconst axiosApi = axios.create({\n  baseURL: REACT_APP_API_URL,\n});\n\naxios.interceptors.request.use(function (config) {\n  return config;\n});\n\naxiosApi.interceptors.response.use(\n  (response) => response,\n  (error) => Promise.reject(error)\n);\n\nexport async function get(url, config) {\n  return await axiosApi\n    .get(url, {\n      ...config,\n    })\n    .then((response) => response.data);\n}\n\nexport async function post(url, config) {\n  return await axiosApi\n    .post(url, {\n      ...config,\n    })\n    .then((response) => response.data);\n}\n\nexport async function del(url, config) {\n  return await axiosApi\n    .delete(url, {\n      ...config,\n    })\n    .then((response) => response);\n}\n\nexport async function patch(url, config) {\n  return await axiosApi\n    .patch(url, {\n      ...config,\n    })\n    .then((response) => response.data);\n}","import { get, post, del, patch } from '../../services/api';\n\nconst POST_ENDPOINT = '/posts';\n\nexport const getPostDetails = (id) =>\n  get(POST_ENDPOINT, {\n    params: {\n      id: id,\n    },\n  });\n\nexport const addNewPost = (requestBody) => post(POST_ENDPOINT, requestBody);\n\nexport const deletePost = (id) => del(`${POST_ENDPOINT}/${id}`);\n\nexport const updatePost = (id, requestBody) => patch(`${POST_ENDPOINT}/${id}`, requestBody);\n","import { takeLatest, takeEvery, put, call, all } from 'redux-saga/effects';\n\nimport { ADD_NEW_POST, GET_POST_DETAILS, DELETE_POST_BY_ID, UPDATE_POST_BY_ID } from '../actyionTypes';\n\nimport {\n  addNewPostSuccess,\n  addNewPostFail,\n  getPostDetailsSuccess,\n  getPostDetailsFail,\n  deletePostByIdSuccess,\n  deletePostByIdFail,\n  updatePostByIdSuccess,\n  updatePostByIdFail,\n} from '../actions/posts';\n\nimport { addNewPost, getPostDetails, deletePost, updatePost } from 'utils/fetch/posts';\n\nfunction* onAddNewPost({ payload: requestBody }) {\n  try {\n    const response = yield call(addNewPost, requestBody);\n    yield put(addNewPostSuccess(response));\n  } catch (error) {\n    yield put(addNewPostFail(error.response));\n  }\n}\n\nfunction* onGetPostDetails({ payload: postIdList }) {\n  try {\n    let response = yield all(postIdList.map(id => call(getPostDetails, id)));\n    response = [].concat(...response);\n\n    yield put(getPostDetailsSuccess(response));\n  } catch (error) {\n    yield put(getPostDetailsFail(error.response));\n  }\n}\n\nfunction* onDeletePostById({ payload: id }) {\n  try {\n    const response = yield call(deletePost, id);\n    if (response.status === 200) {\n      yield put(deletePostByIdSuccess(id));\n    }\n  } catch (error) {\n    yield put(deletePostByIdFail(error.response));\n  }\n}\n\nfunction* onUpdatePostById({ payload: { id, requestBody } }) {\n  try {\n    const response = yield call(updatePost, id, requestBody);\n    yield put(updatePostByIdSuccess(response));\n  } catch (error) {\n    yield put(updatePostByIdFail(error.response));\n  }\n}\n\nfunction* PostSaga() {\n  yield takeLatest(ADD_NEW_POST, onAddNewPost);\n  yield takeEvery(GET_POST_DETAILS, onGetPostDetails);\n  yield takeEvery(DELETE_POST_BY_ID, onDeletePostById);\n  yield takeEvery(UPDATE_POST_BY_ID, onUpdatePostById);\n}\n\nexport default PostSaga;\n","import { all, fork } from 'redux-saga/effects';\n\nimport PostSaga from '../saga/posts';\n\nexport default function* rootSaga() {\n  yield all([fork(PostSaga)]);\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from '../reducers';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import {\n  Navbar,\n  Container\n} from 'react-bootstrap';\n\nexport default function PostNavbar() {\n  return (\n    <>\n      <Navbar bg='light' className='mb-3'>\n        <Container>\n          <Navbar.Brand>CRUD NV</Navbar.Brand>\n        </Container>\n      </Navbar>\n    </>\n  )\n}","import { Toast } from 'react-bootstrap';\n\nexport default function ErrorToast({ show, errorMessage, onClose }) {\n  return (\n    <Toast show={show} onClose={onClose}>\n      <Toast.Header>\n        <strong className='me-auto'>{errorMessage}</strong>\n      </Toast.Header>\n    </Toast>\n  )\n}","import React, { useState } from 'react';\nimport {\n  Container,\n  Form,\n  Button\n} from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\n\nimport { addNewPost } from 'utils/redux/actions/posts';\nimport ErrorToast from 'components/ErrorToast';\n\nfunction FormAddPost() {\n  const [requestBody, setRequestBody] = useState({\n    title: '',\n    body: ''\n  });\n  const [error, setError] = useState(null);\n  const [showErrorToast, setShowErrorToast] = useState(false);\n  const dispatch = useDispatch();\n\n  const addPost = (event) => {\n    event.preventDefault();\n\n    if (!requestBody.title || !requestBody.body) {\n      setError('You must fill all the input box');\n      setShowErrorToast(true);\n      return;\n    }\n\n    dispatch(addNewPost({\n      ...requestBody,\n      userId: 1,\n    }));\n  }\n\n  const toggleShowErrorToast = () => setShowErrorToast(!showErrorToast);\n\n  const handleChange = (event) => {\n    setShowErrorToast(false);\n\n    let value = event.target.value;\n    let name = event.target.name;\n\n    setRequestBody((prevalue) => {\n      return {\n        ...prevalue,\n        [name]: value\n      }\n    })\n  }\n\n  return (\n    <Container>\n      <ErrorToast show={showErrorToast} errorMessage={error} onClose={toggleShowErrorToast} />\n      <Form className='mb-3'>\n        <Form.Group className='mb-3' controlId='post-title'>\n          <Form.Label>Title</Form.Label>\n          <Form.Control type='test' placeholder='Title' onChange={handleChange} name='title' value={requestBody.title} />\n          <Form.Text className='text-muted'>\n            Please add the title to your new post\n          </Form.Text>\n        </Form.Group>\n\n        <Form.Group className='mb-3' controlId='post-body'>\n          <Form.Label>Post</Form.Label>\n          <Form.Control type='textarea' placeholder='Tell us about your new post' onChange={handleChange} name='body' value={requestBody.body} />\n        </Form.Group>\n\n        <Button size='sm' variant='primary' type='submit' onClick={addPost}>\n          Submit\n        </Button>\n      </Form>\n    </Container>\n  )\n}\n\nexport default FormAddPost;","import {\n  Modal,\n  Button,\n  ButtonGroup\n} from 'react-bootstrap';\n\nexport default function DeleteModal({\n  handleCloseDeleteModal,\n  showModal,\n  deletePost,\n  idToDelete\n}) {\n  return (\n    <Modal show={showModal} onHide={handleCloseDeleteModal}>\n      <Modal.Dialog>\n        <Modal.Header closeButton>\n          <Modal.Title>Delete Post</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <p>Are you sure want to delete this post?</p>\n\n          <ButtonGroup sise='sm'>\n            <Button\n              size='sm'\n              variant='danger'\n              onClick={handleCloseDeleteModal}\n            >Cancel</Button>\n\n            <Button size='sm' variant='primary' onClick={() => deletePost(idToDelete)}>Submit</Button>\n          </ButtonGroup>\n        </Modal.Body>\n      </Modal.Dialog>\n    </Modal>\n  )\n}","import React, { useState } from 'react';\nimport {\n  Form,\n  Button,\n  ButtonGroup\n} from 'react-bootstrap';\n\nimport { updatePostById } from 'utils/redux/actions/posts';\nimport { useDispatch } from 'react-redux';\n\nexport default function EditPost({\n  handleCloseEditPost,\n  title,\n  body,\n  postIdToEdit\n}) {\n  const dispatch = useDispatch();\n  const [requestBody, setRequestBody] = useState({\n    title,\n    body\n  });\n\n  const handleChange = (event) => {\n    let value = event.target.value;\n    let name = event.target.name;\n\n    setRequestBody((prevalue) => {\n      return {\n        ...prevalue,\n        [name]: value\n      }\n    })\n  }\n\n  const editPost = async () => {\n    dispatch(updatePostById(postIdToEdit, requestBody));\n    handleCloseEditPost();\n  }\n\n  return (\n    <Form className='mb-3'>\n      <Form.Group className='mb-3' controlId='edit-title'>\n        <Form.Label>Title</Form.Label>\n        <Form.Control type='test' onChange={handleChange} name='title' value={requestBody.title} />\n        {title}\n      </Form.Group>\n\n      <Form.Group className='mb-3' controlId='edit-body'>\n        <Form.Label>Post</Form.Label>\n        <Form.Control type='textarea' onChange={handleChange} name='body' value={requestBody.body} />\n      </Form.Group>\n\n      <ButtonGroup size='sm'>\n        <Button\n          variant='danger'\n          onClick={handleCloseEditPost}\n          className='mr-3'\n        >\n          Cancel\n        </Button>\n        <Button\n          variant='primary'\n          onClick={editPost}\n        >\n          Submit\n        </Button>\n      </ButtonGroup>\n    </Form >\n  )\n}","export default function ActionInfo(params) {\n  return (\n    <div className='mb-5'>\n      {params.detail}\n    </div>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Container, Row, Col, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getPostDetails, deletePostById } from 'utils/redux/actions/posts';\nimport DeleteModal from 'components/DeleteModal';\nimport EditPost from 'components/EditPost';\nimport ActionInfo from 'components/ActionInfo';\n\nexport default function Posts() {\n  const LOADING = 'loading...';\n  const [showModal, setShow] = useState(false);\n  const [idToDelete, setIdToDelete] = useState(null);\n  const [idToEdit, setIdToEdit] = useState(null);\n  const [editPost, setEditPost] = useState(false);\n\n  const TOTAL_POST = 100;\n  const POST_ID_LIST = [];\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    function fetchPosts() {\n      for (let index = 1; index <= TOTAL_POST; index++) {\n        POST_ID_LIST.push(index);\n      }\n      dispatch(getPostDetails(POST_ID_LIST));\n    }\n\n    fetchPosts();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const deletePost = id => {\n    dispatch(deletePostById(id));\n    setShow(false);\n  }\n\n  const handleCloseDeleteModal = () => setShow(false);\n  const handleShowDeleteModal = (id) => {\n    setIdToDelete(id)\n    setShow(true)\n  };\n\n  const handleCloseEditPost = () => setEditPost(false);\n  const handleOpenEditPost = (postId) => {\n    setEditPost(true);\n    setIdToEdit(postId);\n  }\n\n  const {\n    posts,\n    loadingAddNewPost,\n    loadingRetrievePost,\n    loadingDeletePost,\n    loadingUpdatePost,\n    error\n  } = useSelector((state) => state.PostReducer);\n  return (\n    <Container>\n      <DeleteModal\n        handleCloseDeleteModal={handleCloseDeleteModal}\n        showModal={showModal}\n        deletePost={deletePost}\n        idToDelete={idToDelete}\n      />\n\n      {error.message && <ActionInfo detail={error.message} />}\n\n      {\n        (loadingAddNewPost || loadingDeletePost || loadingUpdatePost) &&\n        <ActionInfo detail={LOADING} />\n      }\n\n      {loadingRetrievePost ? (\n        LOADING\n      ) : (\n        posts && posts.map((item) => {\n          return (\n            <Row className='posts' key={`${item.id}}`}>\n              <Col lg={8} md={10} sm={12}>\n                <Card className='mb-3'>\n                  <Card.Body>\n                    {editPost && idToEdit === item.id ? <EditPost title={item.title} body={item.body} handleCloseEditPost={handleCloseEditPost} postIdToEdit={item.id} /> : <>\n                      <Card.Title>{item.title}</Card.Title>\n                      <Card.Text>{item.body}</Card.Text>\n                    </>\n                    }\n\n                    {!editPost && <>\n                      <ButtonGroup size='sm'>\n                        <Button\n                          onClick={() => handleShowDeleteModal(item.id)}\n                          variant='danger'>\n                          Delete\n                        </Button>\n\n                        <Button\n                          variant='primary'\n                          onClick={() => handleOpenEditPost(item.id)}\n                        >\n                          Edit\n                        </Button>\n                      </ButtonGroup>\n                    </>\n                    }\n\n                  </Card.Body>\n                </Card>\n              </Col>\n            </Row>\n          );\n        })\n      )}\n    </Container>\n  );\n}\n","import PostNavbar from 'components/Navbar';\nimport FormAddPost from 'components/FormAddPost';\nimport Posts from 'components/Posts';\n\nexport default function Home() {\n  return (\n    <>\n      <PostNavbar />\n      <FormAddPost />\n      <Posts />\n    </>\n  );\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport store from 'utils/redux/store';\nimport Home from 'pages/Home';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Routes>\n          <Route exact path='/' element={<Home />} />\n        </Routes>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // 'Content is cached for offline use.' message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}